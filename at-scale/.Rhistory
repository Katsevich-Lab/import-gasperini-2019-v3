datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
neg_control_pairs_fp <-  paste0(paper_dir, dataset, "/neg_control_pairs.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
if (file.exists(neg_control_pairs_fp)) file.remove(neg_control_pairs_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
# i. perform cell qc; restrict attention to cells with at least 1 grna and 1 gene expressed
global_cell_covariates <- mm_odm |> get_cell_covariates()
ok_cells <- global_cell_covariates |> dplyr::filter(grna_assignment_n_nonzero >= 1) |> row.names()
mm_odm_sub <- mm_odm[,ok_cells]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality; keep features expressed in N_CELLS_PER_GRNA_THRESH cells
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
n_cells_per_grna <- grna_assign_modality |>
get_feature_covariates() |>
dplyr::pull(n_nonzero)
grna_assign_modality <- grna_assign_modality[n_cells_per_grna >= N_CELLS_PER_GRNA_THRESH,]
mm_odm_sub@modalities$grna_assignment <- grna_assign_modality
# grna expression modality: keep the same features as above
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
ok_grnas <- get_feature_ids(grna_assign_modality)
grna_expression_modality <- grna_expression_modality[ok_grnas,]
mm_odm_sub@modalities[["grna_expression"]] <- grna_expression_modality
# response modalities; keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper,
dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub, FALSE)
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc, multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write the set of negative control grna group-gene pairs
ntcs <- mm_odm_sub_proc |>
get_modality("grna_assignment") |>
ondisc::get_feature_covariates() |>
dplyr::filter(target == "non-targeting") |>
dplyr::pull(grna_group) |> unique()
gene_ids <- mm_odm_sub_proc |>
get_modality("gene") |>
ondisc::get_feature_ids()
neg_control_pairs <- expand.grid(gene_id = gene_ids, grna_group = ntcs)
saveRDS(neg_control_pairs, neg_control_pairs_fp)
}
}
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_grna_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_grna_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_grna_expression_dir, processed_grna_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 1. gene expression matrix
###########################
# gene count matrix
mtx_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.exprs.mtx")
barcodes_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt")
gene_ids_fp <- paste0(raw_data_dir, "GSE120861_at_scale_screen.genes.txt")
odm_fp <- paste0(processed_gene_dir, "matrix.odm")
metadata_fp <- paste0(processed_gene_dir, "metadata.rds")
ondisc::save_odm
# create the odm
if (!file.exists(odm_fp)) {
gene_odm <- create_ondisc_matrix_from_mtx(mtx_fp = mtx_fp, barcodes_fp = barcodes_fp,
features_fp = gene_ids_fp, odm_fp = odm_fp,
metadata_fp = metadata_fp, progress = TRUE)
# Add p_mito and batch from cell_covariates data frame
gasp_cell_covariates <- readRDS(paste0(intermediate_data_dir, "cell_covariates.rds"))
gene_odm_plus_pmito_batch <- mutate_cell_covariates(gene_odm, p_mito = gasp_cell_covariates$percent.mito,
batch = factor(gasp_cell_covariates$prep_batch))
# save the metadata (overwriting the original metadata file)
save_odm(odm = gene_odm_plus_pmito_batch,
metadata_fp = metadata_fp)
} else {
gene_odm_plus_pmito_batch <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
}
gene_odm_plus_pmito_batch
gene_odm_plus_pmito_batch |> get_feature_covariates() |> head()
###########################
# 2. grna expression matrix
###########################
# next, load the grna count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_grna_expression_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_expression_dir, "metadata.rds")
grna_count_matrix <- readRDS(paste0(intermediate_data_dir, "grna_count_matrix.rds"))
grna_feature_covariate_df <-  readRDS(paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
# confirm that (1) cell barcodes of grna exp match those of gene odm, and (2) grna barcodes of grna exp match those of grna_feature_covariate_df
identical(get_cell_barcodes(gene_odm_plus_pmito_batch), colnames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
cell_barcodes <- colnames(grna_count_matrix)
features_df <- data.frame(barcode = grna_feature_covariate_df$barcode)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# modify the feature covariates by adding the grna covariate information
grna_feature_covariate_df <- dplyr::mutate(grna_feature_covariate_df, barcode = NULL)
grna_odm_exp_mod <- grna_odm_exp %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
# overwrite metadata file
save_odm(grna_odm_exp_mod, metadata_fp)
############################################
# 3. grna assignment matrix (threshold at 5)
###########################################
grna_assign_matrix <- grna_count_matrix >= 5
odm_fp <- paste0(processed_grna_assignment_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_assignment_dir, "metadata.rds")
grna_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_assign_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
grna_odm_assign_mod <- grna_odm_assign %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
save_odm(odm = grna_odm_assign_mod, metadata_fp = metadata_fp)
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
raw_dir <- paste0(gasp_offsite, "raw/")
processed_dir <- paste0(gasp_offsite, "processed/")
# read gRNA-gene pairs and gRNA info
all_results <- readr::read_tsv(file = paste0(raw_dir, "GSE120861_all_deg_results.at_scale.txt"),
col_names = TRUE, col_types = "c")
pairs_to_analyze <- all_results %>%
dplyr::select(gene_id = ENSG, gRNA_group, site_type)
saveRDS(pairs_to_analyze, paste0(processed_dir, "pairs_ungrouped.rds"))
.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR")
.get_config_path("LOCAL_REPLOGLE_2021_DATA_DIR")
rep_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2021_DATA_DIR"))
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2021_DATA_DIR"))
rm(rep_offsite)
repl_offsite
# create raw directory
raw_data_dir_rep <- paste0(repl_offsite, "raw")
raw_data_dir_rep
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2021_DATA_DIR"))
repl_offsite
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
# load R.utils; increase timeout to 5 hours
library(R.utils)
options(timeout = 5 * 60 * 60)
# create raw directory
raw_data_dir_rep <- paste0(repl_offsite, "raw")
raw_data_dir_rep
subdirs <- c("kd8", "rd7", "kd6", "kd8_ultima")
subdirs
raw_data_dir_rep
paste0(raw_data_dir_rep, "/", subdirs)
# create raw directory; also create subdirectories for the four datasets
raw_data_dir_rep <- paste0(repl_offsite, "raw", c("kd8", "rd7", "kd6", "kd8_ultima"))
raw_data_dir_rep
for (dir in raw_data_dir_rep) {
dir.create(dir, recursive = TRUE)
}
# create raw directory; also create subdirectories for the four datasets
raw_data_dir_rep <- paste0(repl_offsite, "raw/", c("kd8", "rd7", "kd6", "kd8_ultima"))
for (dir in raw_data_dir_rep) {
dir.create(dir, recursive = TRUE)
}
data_urls <- c(rd7 = "https://plus.figshare.com/ndownloader/files/36000888",
kd8_ultima = "https://plus.figshare.com/ndownloader/files/36000884",
kd6 = "https://plus.figshare.com/ndownloader/files/36000843",
kd8 = "https://plus.figshare.com/ndownloader/files/36000572")
i <- 1
data_urls[1]
names(data_urls[1])
to_save_dir <- names(data_urls[1])
raw_data_dir_rep
raw_data_dir_rep
repl_offsite
# create raw directory; also create subdirectories for the four datasets
raw_data_dir <- paste0(repl_offsite, "raw/")
# create raw directory; also create subdirectories for the four datasets
raw_data_dir <- paste0(repl_offsite, "raw/")
raw_data_dir_rep <- paste0(raw_data_dir, c("kd8", "rd7", "kd6", "kd8_ultima"))
for (dir in raw_data_dir_rep) {
dir.create(dir, recursive = TRUE)
}
# URL of data
data_urls <- c(rd7 = "https://plus.figshare.com/ndownloader/files/36000888",
kd8_ultima = "https://plus.figshare.com/ndownloader/files/36000884",
kd6 = "https://plus.figshare.com/ndownloader/files/36000843",
kd8 = "https://plus.figshare.com/ndownloader/files/36000572")
to_save_dir <- names(data_urls[1])
to_save_dir
to_save_dir
names(data_urls[1])
to_save_dir <- names(data_urls[1])
to_save_dir
paste0(raw_data_dir, to_save_dir)
to_save_fp <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.gz")
to_save_fp
data_urls
rd7
# URL of data
data_urls <- c(rd7 = "https://plus.figshare.com/ndownloader/files/36000888",
kd8_ultima = "https://plus.figshare.com/ndownloader/files/36000884",
kd6 = "https://plus.figshare.com/ndownloader/files/36000843",
kd8 = "https://plus.figshare.com/ndownloader/files/36000572")
to_save_dir <- names(data_urls[1])
to_save_fp <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.gz")
dest <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.gz")
to_save_dir <- names(data_urls[i])
dest <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.gz")
source <-  data_urls[i]
to_save_dir
dest
source
to_save_dir
dest
source
options(timeout = 5 * 60 * 60)
download.file(url = source, destfile = dest)
gunzip(paste0(dest))
print(paste0("Downloading ", filename))
filename
i <- 1
to_save_dir <- names(data_urls[i])
dest <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.gz")
source <- data_urls[i]
download.file(url = source, destfile = dest)
gunzip(paste0(dest))
dest <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.tar.gz")
source <- data_urls[i]
dest <- paste0(raw_data_dir, to_save_dir, "/raw.mtx.tar.gz")
dest
gunzip(paste0(dest))
dest
untar(paste0(dest))
dest
dest
?gunzip
dest
45058946
.Machine$integer.max
56
56 * 45058946
35328156
35029774 * 56
35029774 * 56 < .Machine$integer.max
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
# load R.utils; increase timeout to 5 hours
library(R.utils)
options(timeout = 5 * 60 * 60)
# create raw directory; also create subdirectories for the four datasets
raw_data_dir <- paste0(repl_offsite, "raw/")
raw_data_dir_rep <- paste0(raw_data_dir, c("kd8", "rd7", "kd6", "kd8_ultima"))
for (dir in raw_data_dir_rep) {
dir.create(dir, recursive = TRUE)
}
# URL of data
data_urls <- c(rd7 = "https://plus.figshare.com/ndownloader/files/36000888",
kd8_ultima = "https://plus.figshare.com/ndownloader/files/36000884",
kd6 = "https://plus.figshare.com/ndownloader/files/36000843",
kd8 = "https://plus.figshare.com/ndownloader/files/36000572")
data_urls
# URL of data
data_urls <- c(rd7 = "https://plus.figshare.com/ndownloader/files/36000888",
kd8_ultima = "https://plus.figshare.com/ndownloader/files/36000884",
kd6 = "https://plus.figshare.com/ndownloader/files/36000843",
kd8 = "https://plus.figshare.com/ndownloader/files/36000572")[1]
data_urls
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
paste0(repl_offsite, "raw/")
raw_data_dir <- paste0(repl_offsite, "raw/rd7/rpe1_other/")
list.files(raw_data_dir)
grep(pattern = "*.mtx", x = list.files(raw_data_dir))
grep(pattern = "*.mtx", x = list.files(raw_data_dir), value = TRUE)
mtx_fs <- grep(pattern = "*.mtx", x = list.files(raw_data_dir), value = TRUE)
mtx_fs
mtx_fs <- grep(pattern = "*.mtx", x = list.files(raw_data_dir, path = TRUE), value = TRUE)
mtx_fs <- grep(pattern = "*.mtx", x = list.files(raw_data_dir, full.names = TRUE), value = TRUE)
mtx_fs
readLines(con = mtx_fs[1], n = 3)
info <- readLines(con = mtx_fs[1], n = 3)
info
info <- readLines(con = mtx_fs[1], n = 3)[2]
info
info <- readLines(con = mtx_fs[1], n = 3)[3]
inflo
info
.split_args(info)
strsplit(info)
stringr::str_split(info)
.split_args
.split_args(info)
.split_args(info)[3]
as.integer(.split_args(info)[3])
mtx_fs
i <- mtx_fs[1]
info <- readLines(con = i, n = 3)[3]
info
as.integer(.split_args(info)[3])
n_lines_per_file <- sapply(X = mtx_fs, FUN = function(i) {
info <- readLines(con = i, n = 3)[3]
as.integer(.split_args(info)[3])
})
n_lines_per_file
length(n_lines_per_file)
mean(n_lines_per_file)
sum(n_lines_per_file)
.Machine$integer.max
sum(n_lines_per_file) + 1
mtx_fs
raw_data_dir
list.fliles(raw_data_dir)
list.files(raw_data_dir)
raw_data_dir
barcodes_fp <- paste0(raw_data_dir, "RD7_1_barcodes.tsv")
barcodes_fp
raw_data_dir
list.files(raw_data_dir)
features_fp <- paste0(raw_data_dir, "RD7_1_features.tsv")
barcodes_fp <- paste0(raw_data_dir, "RD7_1_barcodes.tsv")
features_fp <- paste0(raw_data_dir, "RD7_1_features.tsv")
barcodes_fp
features_fp
matrix_fp <- paste0(raw_data_dir, "RD7_1_matrix.mtx")
matrix_fp
readr::read_tsv(barcodes_fp)
feats <- readr::read_tsv(features_fp)
head(feats)
feats <- readr::read_tsv(features_fp, col_names = c("ID", "name", "modality"))
head(feats)
feat_df <- readr::read_tsv(features_fp, col_names = c("ID", "name", "modality"))
head(feat_df)
head(feat_df)
head(feat_df)
count_mat <- readr::read_tsv(matrix_fp, col_names = c("feat_id", "cell_id", "count"), skip = 2)
head(count_mat)
gc()
count_mat <- readr::read_tsv(matrix_fp, col_names = c("feat_id", "cell_id", "count"), skip = 2, col_types = c("iii"))
barcodes_fp <- paste0(raw_data_dir, "RD7_1_barcodes.tsv")
repl_offsite <- paste0(.get_config_path("LOCAL_REPLOGLE_2022_DATA_DIR"))
raw_data_dir <- paste0(repl_offsite, "raw/rd7/rpe1_other/")
mtx_fs <- grep(pattern = "*.mtx",
x = list.files(raw_data_dir, full.names = TRUE), value = TRUE)
barcodes_fp <- paste0(raw_data_dir, "RD7_1_barcodes.tsv")
features_fp <- paste0(raw_data_dir, "RD7_1_features.tsv")
matrix_fp <- paste0(raw_data_dir, "RD7_1_matrix.mtx")
count_mat <- readr::read_tsv(matrix_fp, col_names = c("feat_id", "cell_id", "count"), skip = 2, col_types = c("iii"))
count_mat <- data.table::fread(file = matrix_fp, skip = 2)
head(count_mat)
count_mat <- data.table::fread(file = matrix_fp, skip = 3)
haed(count_mat)
head(count_mat)
head(feat_df)
feat_df <- readr::read_tsv(features_fp, col_names = c("ID", "name", "modality"))
head(feat_df)
feat_df$modality |> unique()
head(feat_df$modality == "CRISPR Guide Capture")
sum(feat_df$modality == "CRISPR Guide Capture")
mean(feat_df$modality == "CRISPR Guide Capture")
grna_idxs <- min(feat_df$modality == "CRISPR Guide Capture")
head(feat_df$modality == "CRISPR Guide Capture")
min_grna_idx <- min(which(feat_df$modality == "CRISPR Guide Capture"))
min_grna_idx
min_grna_idx
count_mat |> head()
count_mat |> tail()
min_grna_idx
sum(count_mat$V1 >= min_grna_idx)
mean(count_mat$V1 >= min_grna_idx)
100 *mean(count_mat$V1 >= min_grna_idx)
100 * mean(count_mat$V1 >= min_grna_idx)
40000 * 56
x <- rnorm(2240000)
pryr::object_size(x)
object.size(x)
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
raw_dir <- paste0(gasp_offsite, "raw/")
processed_dir <- paste0(gasp_offsite, "processed/")
# read gRNA-gene pairs and gRNA info
all_results <- readr::read_tsv(file = paste0(raw_dir, "GSE120861_all_deg_results.at_scale.txt"),
col_names = TRUE, col_types = "c")
pairs_to_analyze <- all_results %>%
dplyr::select(gene_id = ENSG, gRNA_group, site_type)
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
# create the intermediate data directory; set raw directory
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
if (!dir.exists(intermediate_data_dir)) dir.create(path = intermediate_data_dir, recursive = TRUE)
raw_data_dir <- paste0(gasp_offsite, "raw/")
# Obtain binary grna matrix and cell metadata from monocole object
library(monocle)
library(magrittr)
monocle_obj <- readRDS(paste0(raw_data_dir, "/GSE120861_at_scale_screen.cds.rds"))
cell_metadata <- pData(monocle_obj)
rm(monocle_obj); gc()
covariates_cols <- 1:18
cell_covariates <- cell_metadata[,covariates_cols]
# load the grna "groups" at scale and grna count matrix
cell_barcodes_in_use_long <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_at_scale_screen.cells.txt"),
col_names = FALSE, col_types = "c") %>% dplyr::pull()
# all cell barcodes have 32 characters; strip the last 9
cell_barcodes_in_use <- gsub('.{9}$', '', cell_barcodes_in_use_long)
grna_barcodes_in_use <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_names = c("group_name", "grna_barcode"), col_types = "cc")
grna_counts <- readr::read_tsv(paste0(raw_data_dir, "all_libraries.gRNAcaptured.aggregated.txt"),
col_names = TRUE,
col_types = "cccc") %>% dplyr::rename(cell_barcode = cell, grna_barcode = barcode)
# create the data frame of grna feature covariates
grna_id_to_group_df <- readr::read_tsv(file = paste0(raw_data_dir, "GSE120861_grna_groups.at_scale.txt"),
col_types = "cc", col_names = c("grna_group", "barcode"))
###########################
# 0. Load packages; set fps
###########################
# source config file to get gasperini offsite location
gasp_offsite <- paste0(.get_config_path("LOCAL_GASPERINI_2019_V2_DATA_DIR"), "at-scale/")
processed_data_dir <- paste0(gasp_offsite, "processed/")
processed_gene_dir <- paste0(processed_data_dir, "gene/")
processed_grna_expression_dir <- paste0(processed_data_dir, "grna_expression/")
processed_grna_assignment_dir <- paste0(processed_data_dir, "grna_assignment/")
dirs_to_create <- c(processed_data_dir, processed_gene_dir,
processed_grna_expression_dir, processed_grna_assignment_dir)
for (dir in dirs_to_create) {
if (!dir.exists(dir)) dir.create(path = dir, recursive = TRUE)
}
# set raw directories
raw_data_dir <- paste0(gasp_offsite, "raw/")
intermediate_data_dir <- paste0(gasp_offsite, "intermediate/")
# load packages
library(magrittr)
library(ondisc)
###########################
# 2. grna expression matrix
###########################
# next, load the grna count matrix. Write the backing .odm file and metadata file to disk.
odm_fp <- paste0(processed_grna_expression_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_expression_dir, "metadata.rds")
grna_count_matrix <- readRDS(paste0(intermediate_data_dir, "grna_count_matrix.rds"))
grna_feature_covariate_df <-  readRDS(paste0(intermediate_data_dir, "grna_feature_covariates.rds"))
head(grna_feature_covariate_df)
# confirm that (1) cell barcodes of grna exp match those of gene odm, and (2) grna barcodes of grna exp match those of grna_feature_covariate_df
identical(get_cell_barcodes(gene_odm_plus_pmito_batch), colnames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
head(grna_feature_covariate_df$barcode)
tail(grna_feature_covariate_df$barcode)
rownames(grna_count_matrix)
length(grna_feature_covariate_df$barcode)
length(rownames(grna_count_matrix))
grna_feature_covariate_df$barcode
grna_count_matrix <- grna_count_matrix[grna_feature_covariate_df$barcode,]
dim(grna_count_matrix)
identical(grna_feature_covariate_df$barcode, rownames(grna_count_matrix))
cell_barcodes <- colnames(grna_count_matrix)
features_df <- data.frame(barcode = grna_feature_covariate_df$barcode)
head(features_df)
dim(grna_count_matrix)
length(cell_barcodes)
features_df
head(odm_fp)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# create the grna odm
grna_odm_exp <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_count_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
# modify the feature covariates by adding the grna covariate information
grna_feature_covariate_df <- dplyr::mutate(grna_feature_covariate_df, barcode = NULL)
grna_odm_exp_mod <- grna_odm_exp %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
grna_odm_exp_mod
# overwrite metadata file
save_odm(grna_odm_exp_mod, metadata_fp)
############################################
# 3. grna assignment matrix (threshold at 5)
############################################
grna_assign_matrix <- grna_count_matrix >= 5
odm_fp <- paste0(processed_grna_assignment_dir, "matrix.odm")
metadata_fp <- paste0(processed_grna_assignment_dir, "metadata.rds")
grna_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_assign_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
grna_odm_assign <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_assign_matrix,
barcodes = cell_barcodes,
features_df = features_df,
odm_fp = odm_fp,
metadata_fp = metadata_fp)
grna_odm_assign_mod <- grna_odm_assign %>%
mutate_feature_covariates(coef_of_variation = NULL, grna_feature_covariate_df)
save_odm(odm = grna_odm_assign_mod, metadata_fp = metadata_fp)
